<h1>Introduction</h1>
<p>機械設計工程系 2019 Spring 協同產品設計實習 (Introduction to Collaborative Product Design Practice)</p>
<p>倉儲: <a href="https://github.com/mdecourse/cd2019">https://github.com/mdecourse/cd2019</a></p>
<p>靜態網頁: <a href="https://mde.tw/cd2019">https://mde.tw/cd2019</a> </p>
<p>動態網頁: <a href="https://cd2019.herokuapp.com">https://cd2019.herokuapp.com</a> </p>
<hr/>
<h4>期末報告示範網站:</h4>
<p style="padding-left: 30px;"> <a href="http://cpgx.kmol.info/cd2019">http://cpgx.kmol.info/cd2019</a> (<a href="https://github.com/scrum-1/cd2019">倉儲</a>)</p>
<p style="padding-left: 30px;">餐與 A 班組員協同示範倉儲: <a href="https://github.com/scrum-2/cd2019a">https://github.com/scrum-2/cd2019a</a></p>
<p style="padding-left: 30px;">參與 B 班組員協同示範倉儲: <a href="https://github.com/scrum-2/cd2019b">https://github.com/scrum-2/cd2019b</a> </p>
<hr/>
<h4>分組期末協同倉儲與網站:</h4>
<p>A 班期末協同專案倉儲: <a href="https://github.com/scrum-1/cd2019a">https://github.com/scrum-1/cd2019a</a> (<a href="http://cpgx.kmol.info/cd2019a">網站</a>)</p>
<p>B 班期末協同專案倉儲: <a href="https://github.com/scrum-1/cd2019b">https://github.com/scrum-1/cd2019b</a> (<a href="http://cpgx.kmol.info/cd2019b">網站</a>)</p>
<hr/>
<p><a href="/downloads/future-of-jobs-2018-world-economic-forum.pdf"></a>電腦輔助設計室與協同設計室行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h4>107學年教育目標:</h4>
<p>本課程延續四技部計算機程式與電腦輔助設計實習之教學內容, 探討如何在網際協同環境進行機械產品開發.</p>
<h4>107-2學期教育目標:</h4>
<p>使用可攜程式系統, 以及 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 與<a href="https://git-scm.com/download/win"> portable Git</a> 管理各學員與分組的動態與靜態網際內容管理系統, 同時利用 <a href="https://www.onshape.com/">Onshape</a> 與 <a href="http://www.coppeliarobotics.com/">V-rep</a> 執行機電資整合產品開發, 當面臨各協同設計階段所遭遇問題時, 各學員可利用客製化程式加以解決.</p>
<h4>達成學期教育目標之評量方式與標準:</h4>
<p>評分比例:</p>
<p style="padding-left: 30px;">學員出席 (20%)</p>
<p style="padding-left: 30px;">Github 倉儲管理  (20%)</p>
<p style="padding-left: 30px;">Onshape 協同操作 (20%)</p>
<p style="padding-left: 30px;">V-rep 模擬 (20%)</p>
<p style="padding-left: 30px;">程式開發 (20%)</p>
<p>評分方式:</p>
<p style="padding-left: 30px;">CD 每週自評與互評表單: <a href="https://goo.gl/forms/qtk5fxdeGYHCeI1M2">https://goo.gl/forms/qtk5fxdeGYHCeI1M2</a> </p>
<p style="padding-left: 30px;">學員自我評量<span> (30%)</span></p>
<p style="padding-left: 30px;">分組自我評量 (30%)</p>
<p style="padding-left: 30px;">倉儲歷程查驗 (40%)</p>
<p>教學方式:</p>
<p style="padding-left: 30px;">課堂講授</p>
<p style="padding-left: 30px;">操作錄影</p>
<p style="padding-left: 30px;">學員實習</p>
<p style="padding-left: 30px;">分組報告</p>
<p>參考資料:</p>
<p><a href="https://open.umn.edu/opentextbooks/subjects/engineering">https://open.umn.edu/opentextbooks/subjects/engineering</a> </p><h2>Future Jobs Report</h2>
<p><a href="/downloads/future-of-jobs-2018-world-economic-forum.pdf">世界經濟論壇 2018 未來工作報告.pdf</a></p>
<h4>2022 年之前, 企業預計納用技術比例列表</h4>
<p><img alt="" class="with_border" height="404" src="/images/adopted_technologies_by_2022.png" width="800"/></p>
<h4>各企業穩定, 新增與多餘工作角色列表</h4>
<p><img alt="" class="with_border" height="586" src="/images/stable_new_and_redundant_roles_by_2022.png" width="800"/></p>
<h1>實習任務</h1>
<p>2019 Spring 協同產品設計實習課程的目標</p>
<ol>
<li>讓學員得以利用 <a href="https://www.onshape.com/">Onshape</a> 以協同模式, 進行機電資有關的產品開發, 並利用 <a href="http://www.coppeliarobotics.com/">V-rep</a> 執行該產品的模擬驗證.</li>
<li><span>各學員必須每週進行學習自評與互評, 並學習如何透過內容充實 (使用夠好麥克風錄音) 的影片 (on Youtube) 發表心得.</span></li>
</ol>
<h4><span></span></h4>
<h2>實習任務一</h2>
<h4>學習要點</h4>
<p>本學期的課程將從各學員自行製作可攜程式系統開始, 讓各學員以團隊協同的方式整理資料, 並且推選代表進行簡報.</p>
<p>此外, 透過 ungit 的導入, 讓 git 與 github 在圖形化介面與中文提交訊息的交互應用下, 能夠更加提升學習效果.</p>
<p>最後, 本學期希望能改寫 <a href="https://github.com/chiamingyen/pygrouf">Pygrouf</a> 成為合用的網際同儕互評暨自評系統.</p>
<h4>各學員執行任務</h4>
<p>請根據 <a href="http://mde.tw/wcm2019/content/實習項目二.html">http://mde.tw/wcm2019/content/實習項目二.html</a> 中的說明:</p>
<ol>
<li>自行建立一套可攜程式系統, 並將過程製作成 3~5 分鐘的簡報, 各班每十號推選一名代表利用課堂時間進行簡報說明.</li>
<li>請設法利用 ungit 管理自己的協同產品設計實習課程網頁 (格式自選, 系統自選).</li>
<li>
<p>請以各班每十號為一組, 研讀 Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> 並各自執行下列教材後, 推選一名代表利用課堂時間進行 3~5 分鐘的內容簡報說明.</p>
<p>Github 教材: <a href="https://lab.github.com/">https://lab.github.com/</a>  (已經以 scrum-1 帳號開始<a href="https://github.com/scrum-1/github-slideshow">學習流程</a>)</p>
</li>
</ol>
<h4>學習成果驗收</h4>
<ol>
<li>各學員確實閱讀 <a href="http://mde.tw/wcm2019/content/實習項目二.html">http://mde.tw/wcm2019/content/實習項目二.html</a><span> 中的說明, 並學會自行製作可攜程式系統.</span></li>
<li><span>各學員確實研讀 Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a><span> 內容, 能夠整理出 3~5 分鐘的簡報.</span></span></li>
<li><span><span>各學員確實執行 <a href="https://lab.github.com/">https://lab.github.com/</a><span>  中的導引內容, 並能夠整理出 3~5 分鐘的簡報.</span></span></span></li>
</ol>
<h3>建立可攜程式系統</h3>
<p>操作影片</p>
<p>安裝 Python 3.7.2</p>
<p>修改 Scripts/pip.exe 中的系統連結設定</p>
<p>HxD: <a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a> </p>
<p>納入相關工具</p>
<p>利用 pip 安裝或移除 Python 模組</p>
<p>不同 home 的啟動設置</p>
<p><a href="https://github.com/mottosso/Qt.py">https://github.com/mottosso/Qt.py</a> (439 個 stars) 與 <a href="https://github.com/spyder-ide/qtpy">https://github.com/spyder-ide/qtpy</a> (255 個 stars) 的選擇. </p>
<p>對話: <a href="https://github.com/spyder-ide/qtpy/issues/69">https://github.com/spyder-ide/qtpy/issues/69</a> </p>
<h3>第一週分組程式</h3>
<p>"程式"中的"程"表示流程, 而"式"則指採用特定格式, 因此"程式"可以解釋為利用特定格式的語法來表達特定流程.</p>
<p>至於電腦程式 (或計算機程式), 則特指該流程是利用電腦執行, 而所謂的特定格式則指採用特定的計算機語言, 與本網誌相關的課程, 主要採用 Python, 其次還使用 Javascript, C/C++ 與 Lua 等程式語言.</p>
<p>學習計算機程式, 特定語言的語法與解題流程互為因果, 因此在過程中, 除了必須了解各程式語言的基本範式及語法外, 還需要針對解題流程中所使用的資料結構與演算法進行取捨, 對於中型以上程式, 還需選擇採用何種資料庫系統.</p>
<p>希望利用 Python 對各班學員亂數分組, 必須先了解如何讀進 (with 與 open 及 read) 各班的學員檔案, 設法將各學員的學號轉進數列 (包含利用 splitlines() , 然後導入 random, 並且了解 random.shuffle() 的用法.</p>
<p>接著在編寫學員亂數分組程式時, 則可按照下列流程配置上述各程式元件:</p>
<ol>
<li>讀進學員資料, 設法將各學員學號轉入數列</li>
<li>利用亂數模組中的 shuffle 函式, 隨機弄亂學員學號數列</li>
<li>利用重複迴圈, 從學員學號數列中一一取出, 準備進行分組</li>
<li>在迴圈中利用整數相除後取得餘數的規律, 依照每組幾人的規劃進行分組</li>
<li>在分組過程, 再設法利用數列的 append, 將各組學員學號納為分組數列</li>
<li>最後將各組數列再放入選課班級數列中備用</li>
</ol>
<p>本學期各班配合協同執行課程實習任務, 進行學員亂數分組, 以下為參考程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random
filename = 'cdbw3_student_list.txt'
# 每組人數
num_in_one_group = 11
# 組序由 1 開始
group = 1
# 各班分組後所得數列
c2019 = []
with open(filename) as f:
    # 讀進全部檔案, 轉進數列, 並同時將各行的 \n 去除
    read_data = f.read().splitlines() 
print("共有 " + str(len(read_data)) + " 位學員")
# 利用 shuffle 將數列隨機弄亂
random.shuffle(read_data)
for i in range(len(read_data)):
    # 利用整數相除的餘數進行分組
    if i%num_in_one_group == 0:
        # 列出分隔符號
        print("-"*20)
        print("group " + str(group) +":")
        # 在分組區隔時重置各組學員數列
        group_list = []
        print()
        # 同時列出與分隔標註對應 i 的數列內容
        print(read_data[i])
        group_list.append(read_data[i])
        group = group + 1
    else:
        # 逐一列出同組的其他學員
        print(read_data[i])
        group_list.append(read_data[i])
    if i%num_in_one_group == 0:
        c2019.append(group_list)
# c2019 為該班分組後所得分組數列
print(c2019)</pre>
<p>註: 第一週 cda 學員資料: <a href="https://raw.githubusercontent.com/mdecourse/cd2019/gh-pages/data/cda/cdaw1_student_list.txt">cdaw1_student_list.txt</a>, 其他相關資料在倉儲 data 目錄下.</p>
<p>另外, 本學期除學員自評外, 加入各組學員互評機制, 請各組實際根據課程評量表單取回之資料, 以程式進行處理, 並提出此一評量機制可能帶來的問題與因應方案.</p>
<h4>已知問題</h4>
<p>利用 mde At nfu At edu At tw G suite 建立自評與互評表單, 目前無法讓 gm At nfu At edu At tw 的用戶登入填表, 第一種解決方法為, 設法配合課程, 在 gm At nfu At edu At tw 網域帳號中重新建立表格, 第二種解決方案則是, 為每一學員建立 mde At nfu At edu At tw 網域下的臨時課程帳號 (課程結束後刪除).</p>
<h3>Git Book 摘要</h3>
<p><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> </p>
<h4>開始</h4>
<p>使用 Git 的原因為: 希望利用分散式版次管理系統執行產品開發, 不重複存檔, 不讓各版次內容產生混淆, 且透過 Github, 可以多人協同, 並透過網際內容管理, 完整呈現開發歷程資料.</p>
<p>在 64 位元 Windows 10 環境中, 採用可攜版本, 無需安裝: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> </p>
<p>Git 基本設定, 利用</p>
<p>git config --global user.name ""使用者"</p>
<p>git config --global user.email "電子郵箱"</p>
<p>git config --global http.proxy http://&lt;username&gt;:&lt;password&gt;@&lt;proxy-server-url&gt;:&lt;port&gt;</p>
<p>上述設定會儲存至可攜系統的 y:\home\.gitconfig 設定檔案中, 若在不同環境中有不同設定, 可以利用 start.bat 啟動系統時, 將 home 指定到所需的目錄中即可.</p>
<h4>Git 基礎</h4>
<p>取得 Git 倉儲的方法, 一方面在近端以 git init 建立新倉儲, 或從遠端 Git 伺服器, 以 git clone 取下某一倉儲檔案.</p>
<p>之後, 新增倉儲或 clone 之倉儲, 都可以利用 git add 對倉儲新增檔案內容, 或以編輯器修改既有的檔案. 倉儲內容改版後, 可以利用 git commit -m "提交說明" 在近端對倉儲提交, 聰遠端 clone 之倉儲, 可直接利用 git push 將倉儲改版內容推送到遠端. 而在近端新增之倉儲, 則必須先利用 git remote add 加入近端倉儲與特定遠端倉儲對應之設定後, 才能以 git push 將改版內容, 推送到遠端.</p>
<p>倘若在可攜系統中導入 ungit, 可以在近端利用圖形化介面, 檢視各倉儲的改版資料, 可以免除在近端使用 git status, git log, git checkout, git diff, git tag, git show 或 git reset 的指令.</p>
<h4>使用 Git 分支</h4>
<p>參考: <a href="https://git-scm.com/book/zh-tw/v2/%E4%BD%BF%E7%94%A8-Git-%E5%88%86%E6%94%AF-%E7%B0%A1%E8%BF%B0%E5%88%86%E6%94%AF">簡述分支</a> </p>
<p>使用分支的目的, 是希望從開發主線上分離開來, 然後在不影響主線的情況下繼續工作. 一旦在分支的改版內容獲得認可, 協同者便可利用 git merge, 將分支的版本納入開發主分支,  或者合併至其他分支中.</p>
<h3>Github 自學</h3>
<p><a href="https://lab.github.com/">https://lab.github.com/</a> </p>
<p>Github 利用其 Issues 與 API 的程式編寫, 以網際自學架構讓使用者可以互動式流程, 學習與 Github 所提供功能有關的自學教材, 其中包括:</p>
<p>Github 簡介: <a href="https://lab.github.com/githubtraining/introduction-to-github">https://lab.github.com/githubtraining/introduction-to-github</a> </p>
<p>Html 簡介: <a href="https://lab.github.com/githubtraining/introduction-to-html">https://lab.github.com/githubtraining/introduction-to-html</a> </p>
<p>利用 Markdown 進行溝通: <a href="https://lab.github.com/githubtraining/communicating-using-markdown">https://lab.github.com/githubtraining/communicating-using-markdown</a> </p>
<p>Github Pages: <a href="https://lab.github.com/githubtraining/github-pages">https://lab.github.com/githubtraining/github-pages</a> </p>
<p>處理合併與衝突: <a href="https://lab.github.com/githubtraining/managing-merge-conflicts">https://lab.github.com/githubtraining/managing-merge-conflicts</a> </p>
<p>審核拉回請求: <a href="https://lab.github.com/githubtraining/reviewing-pull-requests">https://lab.github.com/githubtraining/reviewing-pull-requests</a> </p>
<p>利用 Travis CI 進行整合: <a href="https://lab.github.com/githubtraining/continuous-integration-with-travis-ci">https://lab.github.com/githubtraining/continuous-integration-with-travis-ci</a> </p>
<h3>w1取分項目</h3>
<p>本學期針對各實習任務, 加入取分項目, 各組可以將此項目分配給組員, 完成後可以在自評或互評中做為取分任務.</p>
<p>W1 任務一項目一: 在利用亂數分組, 能否根據已經完成的主程式, 編寫一個網際程式或單機 PyQt5 程式, 讀進相關資料檔案後, 在瀏覽器或 PYQt5 程式中顯示出結果.</p>
<p><span>W1 任務一項目二:  由於一開始亂數分組程式中的 bug, 導致 2a 在分組時, 只得到<a href="https://github.com/mdecourse/cd2019/blob/gh-pages/data/cda/cda_w2_result.txt">分組結果</a>, 並無分組數列, 能否編寫一個程式讀進此一分組結果, 然後列出與 <a href="https://github.com/mdecourse/cd2019/blob/gh-pages/data/cdb/cdbw3_grouping_list.txt">2b 分組結果數列</a>相同格式的資料.</span></p>
<p>W1任務一項目三: 根據 <a href="https://2019wcm.blogspot.com/search/label/ungit">https://2019wcm.blogspot.com/search/label/ungit</a> 為 ungit 寫一個使用手冊.</p>
<p></p>
<h2>實習任務二</h2>
<h4>學習要點</h4>
<p>此任務將逐一導入 <a href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm">http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm</a> 中的導引內容.</p>
<p>首先上場的是:</p>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm</a> </p>
<h4>各學員執行任務</h4>
<p>各學員完成上述 Tutorial 後, 請將個人心得放入個人的課程網頁中.</p>
<h4>分組專題</h4>
<p>請各組利用 <a href="https://www.onshape.com/">OnShape</a> 或其他 MCAD (Mechanical Computer Aided Design) 套件, 以協同模式建立手足球系統, 並將零組件輸入 <a href="http://www.coppeliarobotics.com/">V-rep</a>, 以建立可以兩兩競賽用的動態系統.</p>
<p>技術需求:</p>
<ol>
<li>建立系統所需的 3D 零組件 (利用<a href="https://www.onshape.com/"> Onshape</a> 或其他 MCAD 套件完成)</li>
<li>將零組件轉入<a href="http://www.coppeliarobotics.com/"> V-rep</a> (轉入後是否需要簡化,? 如何簡化? 如何設定模擬參數?)</li>
<li>分辨運動 (<a href="https://en.wikipedia.org/wiki/Kinematics">Kinematics</a>) 模擬與動力 (<a href="https://en.wikipedia.org/wiki/Dynamics_(mechanics)">Dynamics</a>) 模擬的差異.</li>
<li>如何設定各操縱桿的平移軸 (Prismatic <a href="http://www.coppeliarobotics.com/helpFiles/en/jointDescription.htm">Joint</a>) 運動?</li>
<li>如何設定各<span>操縱桿的旋轉軸 (Revolute <a href="http://www.coppeliarobotics.com/helpFiles/en/jointDescription.htm">Joint</a>) 運動?</span></li>
<li><span>如何設定各人偶與足球之間的碰撞<a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm">動力</a><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm">擊球模擬</a><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm"></a>?</span></li>
<li>如何利用鍵盤中的字母鍵控制操縱桿的平移軸與旋轉軸</li>
<li>如何利用程式 (<a href="http://www.coppeliarobotics.com/helpFiles/en/luaCrashCourse.htm">Lua</a> 或 <a href="http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">Python</a>) 控制<span>操縱桿的平移軸與旋轉軸</span></li>
<li><span>如何<a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensors.htm">感測</a>足球通過球門?</span></li>
<li>如何利用 <a href="http://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">Qt 表單</a>紀錄雙方得分?</li>
<li>人偶擊球受力時的應用分析, 可採用 <a href="https://github.com/Range-Software/range3">Range3</a> 進行分析.</li>
</ol>
<p><img alt="" height="600" src="/images/Foosball_table.jpg" width="800"/></p>
<p><img alt="" height="430" src="/images/official-foosball-table-dimensions.jpg" width="550"/></p>
<p>足球員尺寸:</p>
<p><img alt="" height="396" src="/images/foosball_player_dimension.jpg" width="500"/></p>
<p>參考: <a href="https://www.thingiverse.com/thing:1090">https://www.thingiverse.com/thing:1090</a>  and <a href="https://www.thingiverse.com/thing:2563055">https://www.thingiverse.com/thing:2563055</a> </p>
<p>足球尺寸: 36mm diameter; weighs 17 grams<br/>材料: ABS Plastic</p>
<h4>參考影片</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/up2pSZ2u0Ws" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8G6ERBz6BCc" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/heqV9_IAHV0" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QzYcxTjRsPA" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JPtW66z0-VQ" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/XJrNPjc2qMw" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0qE_a0wFRa0" width="560"></iframe></p>
<p><a href="/downloads/The_Design_of_a_Semi-Automated_Football_Table.pdf">The Design of a Semi-Automated Football Table.pdf</a></p>
<p><a href="/downloads/Automated_Football_table_thesis.pdf">Automated Football Table Thesis.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/sD1xugH3fjA" width="560"></iframe></p>
<p><a href="https://github.com/FoosAI/FoosAI">https://github.com/FoosAI/FoosAI</a> </p>
<p><a href="/downloads/Design_of_a_RoboCup_Shooting_Mechanism_report.pdf">Design of a RoboCup Shooting Mechanism report.pdf</a></p>
<p><a href="/downloads/Design_of_a_Ball_Handling_Mechanism_for_RoboCup report.pdf">Design of a Ball Handling Mechanism for RoboCup report.pdf</a></p>
<h4>參考資料</h4>
<p><a href="/downloads/2009_Real-Time Ball Tracking in a Semi-automated Foosball Table.pdf">2009_Real-Time Ball Tracking in a Semi-automated Foosball Table.pdf</a></p>
<p><a href="/downloads/2015_Hambot-An Open Source Robot for RoboCup Soccer.pdf">2015_Hambot-An Open Source Robot for RoboCup Soccer.pdf</a> (<a href="https://github.com/bit-bots">Github</a>)</p>
<p><a href="/downloads/2017_First International HARTING Open Source Prize Winner-The igus Humanoid Open Platform.pdf">2017_First International HARTING Open Source Prize Winner-The igus Humanoid Open Platform.pdf</a> (<a href="https://github.com/igusGmbH/HumanoidOpenPlatform">Hardware</a>, <a href="https://github.com/AIS-Bonn/humanoid_op_ros">Software</a>)</p>
<p><a href="/downloads/2018_Cloud Simulations for RoboCup.pdf">2018_Cloud Simulations for RoboCup.pdf</a></p>
<p><a href="/downloads/2018_Modelling a Solenoid Valve Movement.pdf">2018_Modelling a Solenoid Valve Movement.pdf</a></p>
<p>Holodeck: <a href="https://github.com/BYU-PCCL/holodeck">https://github.com/BYU-PCCL/holodeck</a> </p>
<p><a href="https://github.com/deepdrive/deepdrive">https://github.com/deepdrive/deepdrive</a> </p>
<h4>延伸專案</h4>
<p>在 Windows 10 環境中, 以 <a href="https://www.msys2.org/">MSYS2</a> 編譯 V-rep (<a href="https://github.com/CoppeliaRobotics/v_rep">https://github.com/CoppeliaRobotics/v_rep</a>).</p>
<p><a href="https://drive.google.com/file/d/1QIiAhMf9BTvezmG-w4aIa9Oy2FYB7UIu/view?usp=sharing">V-rep 其他版次原始碼.7z</a> (1.8 GB)</p>
<h3>V-rep Introduction</h3>
<p><a href="https://github.com/mdecourse/cd2018/issues/21">https://github.com/mdecourse/cd2018/issues/21</a> </p>
<p><a href="/downloads/Jansen_walker_40423116car5-2.ttt">Jansen_walker_40423116car5-2.ttt</a></p>
<p><a href="/downloads/mBot_model.ttt">mBot_model.ttt</a></p>
<p>V-rep 檔案格式討論:</p>
<p><a href="http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=199">http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=199</a> </p>
<p>主要討論訴求與重點在於機電資整合產品設計, 若無法透過<span style="background-color: #ffff00;">分散式版次管理</span>釐清每一次協同人員改版的詳細歷程與內容, 將難以讓產品開發流程透明且易於維護 (持續改進).</p>
<p>作者的建議是: 儘量將設計內容以模組化 (models) 單元建構, 然後透過外部 lua 程式導入, 便可彌補目前無文字檔案 ttt 或 ttm 格式時, 無法透過分散式版次管理進行協同設計的遺憾.</p>
<p><a href="http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=2319">http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=2319</a> </p>
<p>討論重點在於: 因為運動與動力模擬系統模型所需納入的資料眾多, 且必須考慮與舊版格式相容, 加上壓縮與內容查驗上的特殊設計要求, 希望利用文字檔案建立 ttt 或 ttm 有一定的難度 (或者礙於<span style="background-color: #ffff00;">商業考量</span>), 目前只能透過既有的外部延伸程式架構進行處理.</p>
<p><a href="http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=7513">http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&amp;t=7513</a></p>
<p>討論重點仍以<span style="background-color: #ffff00;">分散式版次管理</span>上的需求為主, </p>
<p><span>Without version control is almost impossible to work on a V-REP project in a team and even working alone there are several problems like not knowing which are the difference between two version of the same model/scene</span></p>
<p>但是作者的答覆與五年前一模一樣, 希望具備版次管理的開發流程, 仍需搭配模組化 models  與 Lua 或 Python 程式進行, 之後則將透過 <a href="http://www.coppeliarobotics.com/helpFiles/en/blueZeroPlugin.htm">http://www.coppeliarobotics.com/helpFiles/en/blueZeroPlugin.htm</a> 介面 (<a href="https://github.com/blueworkforce/bluezero">Bluezero 原始碼</a>), 尋求更方便的整合.</p>
<p>目前的結論為: V-rep 所揭櫫的是一種開放式創新工作模式, 利用主軸技術 (Lua 搭配 C++) 作為核心, 其餘的 GUI 或整合各式動力分析、轉檔與模型搭建, 都納為延伸模組, 從開發者的角度, 利用 Lua 與 Python 原始碼可以操控任何以 C++ 編寫的核心功能, 因此協同分散式版次管理可以在 Programming 的層次運行.</p>
<p>但就使用 GUI 流程建模的一般用戶, 若無法充分掌握 V-rep 整體程式架構, 必須透過人工方式搭建各種分析功能, 目前只能以觀賞的角度來看 V-rep 所帶出的未來機器人整合開發趨勢.</p>
<h4>V-rep 主核心程式庫</h4>
<p><a href="https://github.com/CoppeliaRobotics/v_rep">https://github.com/CoppeliaRobotics/v_rep</a> is the  V-rep core library: </p>
<p>v_rep.dll </p>
<p>libv_rep.dll.a</p>
<p>編譯上述程式庫所需設定檔案 (<a href="https://2019wcm.blogspot.com/2019/03/v-rep.html">編譯參考</a>):</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># location of boost headers:
    BOOST_INCLUDEPATH = "y:/boost_1_66_0"    # (e.g. Windows)
    #BOOST_INCLUDEPATH = "/usr/local/include"    # (e.g. MacOS)

# location of lua headers:
    LUA_INCLUDEPATH = "y:/lua-5.1.5/src"    # (e.g. Windows)
    #LUA_INCLUDEPATH = "../../../../../mingw64/include/lua5.1"    # (e.g. Windows-MSYS2)
    #LUA_INCLUDEPATH = "../../lua5_1_4_Linux26g4_64_lib/include"    # (e.g. Ubuntu)
    #LUA_INCLUDEPATH = "/usr/local/include/lua5.1"    # (e.g. MacOS)

# lua libraries to link:
    LUA_LIBS = "y:/lua-5.1.5/src/liblua.a"    # (e.g. Windows)
    #LUA_LIBS = -llua5.1    # (e.g. Windows-MSYS2)
    #LUA_LIBS = -L"../../lua5_1_4_Linux26g4_64_lib/" -llua5.1    # (e.g. Ubuntu)
    #LUA_LIBS = "/usr/local/lib/liblua5.1.dylib"    # (e.g. MacOS)

# qscintilla location:
    QSCINTILLA_DIR = "y:/QScintilla_gpl-2.10.2"    # (e.g. Windows)
    #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"    # (e.g. Windows-MSYS2)
    #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"    # (e.g. Ubuntu)
    #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"    # (e.g. MacOS)

# qscintilla headers:
    QSCINTILLA_INCLUDEPATH = "$${QSCINTILLA_DIR}/include" "$${QSCINTILLA_DIR}/Qt4Qt5"

# qscintilla libraries to link:
    QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/libqscintilla2_qt5d.dll.a"    # (e.g. Windows)
    #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/release/libqscintilla2.dll.a"    # (e.g. Windows-MSYS2)    
    #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/libqscintilla2.so"    # (e.g. Ubuntu)
    #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/libqscintilla2.9.0.2.dylib"    # (e.g. MacOS)

# Make sure if a config.pri is found one level above, that it will be used instead of this one:
    exists(../config.pri) { include(../config.pri) }
</pre>
<p>可見 <a href="https://www.boost.org/">Boost C++ 程式庫</a>, <a href="https://www.lua.org/download.html">Lua 原始碼</a>與 <a href="https://www.riverbankcomputing.com/software/qscintilla/intro">QScintilla 原始碼</a>在 V-rep 系統中扮演重要角色.</p>
<h4>V-rep 主執行程式</h4>
<p><a href="https://github.com/CoppeliaRobotics/v_repClientApplication">https://github.com/CoppeliaRobotics/v_repClientApplication</a> is the  V-rep client application for core library:</p>
<p>vrep.exe</p>
<p>允許有 Qt GUI 或無 GUI 的介面執行, 同時載入 v_rep.dll 以及  plugin 程式庫</p>
<p><a href="https://github.com/CoppeliaRobotics/remoteApi">https://github.com/CoppeliaRobotics/remoteApi</a> 則定義 remoteAPI 的連結.</p>
<h4>V-rep 原始碼使用授權</h4>
<p>V-rep 的程式碼全部開源, 但 <a href="https://github.com/CoppeliaRobotics/dynamicsPlugin">https://github.com/CoppeliaRobotics/dynamicsPlugin</a> 與 <a href="https://github.com/CoppeliaRobotics/meshCalculationPlugin">https://github.com/CoppeliaRobotics/meshCalculationPlugin</a> 採商用或免費教育授權, 其餘原始碼採 GPL 3 授權. (詳見:<a href="http://www.coppeliarobotics.com/helpFiles/en/licensing.htm">http://www.coppeliarobotics.com/helpFiles/en/licensing.htm</a> )</p>
<h4>內建模型與場景</h4>
<p>Default Models:</p>
<p><a href="https://github.com/CoppeliaRobotics/models">https://github.com/CoppeliaRobotics/models</a> </p>
<p>Default Scenes:</p>
<p><a href="https://github.com/CoppeliaRobotics/scenes">https://github.com/CoppeliaRobotics/scenes</a> </p>
<h4>Lua 應用程式碼</h4>
<p>Lua for V-rep and Blue REALITY:</p>
<p><a href="https://github.com/CoppeliaRobotics/lua">https://github.com/CoppeliaRobotics/lua</a> </p>
<h4>其他程式庫</h4>
<p>VxMath.dll</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repMath">https://github.com/CoppeliaRobotics/v_repMath</a> </p>
<p>remoteAPI:</p>
<p><a href="https://github.com/CoppeliaRobotics/remoteApi">https://github.com/CoppeliaRobotics/remoteApi</a> </p>
<p>remoteAPi for Lua:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtLuaRemoteApiClient">https://github.com/CoppeliaRobotics/v_repExtLuaRemoteApiClient</a> </p>
<p>C++ plugin framework:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repPlusPlus">https://github.com/CoppeliaRobotics/v_repPlusPlus</a> </p>
<p>Plugin skeleton:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtPluginSkeleton">https://github.com/CoppeliaRobotics/v_repExtPluginSkeleton</a> </p>
<p>Common files for Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/common">https://github.com/CoppeliaRobotics/common</a> </p>
<p>stub generator:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repStubsGen">https://github.com/CoppeliaRobotics/v_repStubsGen</a>  (<a href="https://github.com/CoppeliaRobotics/v_repExtPluginSkeletonNG">Example</a>)</p>
<p>CAD data Import/Export Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtAssimp">https://github.com/CoppeliaRobotics/v_repExtAssimp</a> </p>
<p>Qt Custom GUI interface Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtCustomUI">https://github.com/CoppeliaRobotics/v_repExtCustomUI</a> </p>
<p>Lua parser Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtLuaParser">https://github.com/CoppeliaRobotics/v_repExtLuaParser</a> </p>
<p>Video recorder library:</p>
<p><a href="https://github.com/CoppeliaRobotics/videoRecorder">https://github.com/CoppeliaRobotics/videoRecorder</a> </p>
<p>use LuaJIT in stead of Lua library:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repLuaLibrary">https://github.com/CoppeliaRobotics/v_repLuaLibrary</a> </p>
<p>Convex hull library:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtQhull">https://github.com/CoppeliaRobotics/v_repExtQhull</a> </p>
<p>Image Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtImage">https://github.com/CoppeliaRobotics/v_repExtImage</a> </p>
<p>ROS interface Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtRosInterface">https://github.com/CoppeliaRobotics/v_repExtRosInterface</a> </p>
<p>Surface reconstruction Plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtSurfaceReconstruction">https://github.com/CoppeliaRobotics/v_repExtSurfaceReconstruction</a> </p>
<p>Cloud point matching plugin:</p>
<p><a href="https://github.com/CoppeliaRobotics/v_repExtICP">https://github.com/CoppeliaRobotics/v_repExtICP</a> </p>
<h3>BubbleRob</h3>
<h4>V-rep user manual:</h4>
<p><a href="http://www.coppeliarobotics.com/helpFiles/">http://www.coppeliarobotics.com/helpFiles/</a></p>
<h4>BubbleRob Tutorial:</h4>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm</a> </p>
<p>操作步驟參考: <a href="http://fid.cl/courses/ai-robotics/vrep-tut/tutorial_VREP_bob.pdf">http://fid.cl/courses/ai-robotics/vrep-tut/tutorial_VREP_bob.pdf</a>  (<a href="/downloads/tutorial_VREP_bob.pdf">tutorial_VREP_bob.pdf</a>)</p>
<p><a href="/downloads/introduction_to_robotics_mechanics_planning_and_control.pdf">introduction_to_robotics_mechanics_planning_and_control.pdf</a></p>
<p><a href="/downloads/ModernRobotics.zip">modern_robotics.zip</a></p>
<p><a href="/downloads/ModernRobotics_lib.7z">modern_robotics_lib.zip</a> (<a href="https://github.com/NxRLab/ModernRobotics">https://github.com/NxRLab/ModernRobotics</a> )</p>
<p><a href="/downloads/IKexercise.pdf">Inverse Kinematics.pdf</a></p>
<p><a href="/downloads/MR_practice_exercises.pdf">modern_robotics_exercise.pdf</a></p>
<p>V-rep Introduction: <a href="http://hades.mech.northwestern.edu/index.php/V-REP_Introduction">http://hades.mech.northwestern.edu/index.php/V-REP_Introduction</a> </p>
<p>Get started with V-rep: <a href="http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator">http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator</a> </p>
<h4>動態模擬考量</h4>
<p>If we run the simulation again, we can notice that both objects do not interfere<br/>anymore. However, we notice that BubbleRob slightly moves, even with locked motor.</p>
<p>We also try to run the simulation with different physics engines: the result will be<br/>different. Stability of dynamic simulations is tightly linked to masses and inertias of<br/>the involved non-static shapes.</p>
<p>This has to do with the objects masses: Keep masses similar and not too light.<br/>When linking two shapes with a dynamically enabled joint or a dynamically enabled<br/>force sensor, make sure the two shape’s masses are not too different (m1 &lt; 10 ∗ m2<br/>and m2 &lt; 10 ∗ m1), otherwise the joint or force sensor might be very soft and wobbly<br/>and present large positional/orientational errors (this effect can however also be used<br/>as a natural damping sometimes).</p>
<p>Additionally, very low mass shapes should be avoided since they won’t be able to<br/>exert very large forces onto other shapes (even if propelled by high force actuators!).<br/>Lastly, the intertia has a role to play: Keep principal moments of inertia* relatively<br/>large.</p>
<p>Try keeping the principal moments of inertia / mass (*refer to the shape dynamics<br/>properties dialog) relatively large, otherwise mechanical chains might be difficult to<br/>control and/or might behave in a strange way.</p>
<p>Therefore, we need to multiply all involved object’s masses by 8</p>
<h4>建立 Model</h4>
<p><span>We now need to finish </span><strong>BubbleRob</strong><span><span> </span>as a<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/models.htm">model</a><span><span> </span>definition. We select the model base (i.e. object<span> </span></span><em>bubbleRob</em><span>) then check items<span> </span></span><strong>Object is model base</strong><span><span> </span>and<span> </span></span><strong>Object/model can transfer or accept DNA</strong><span><span> </span>in the<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/commonPropertiesDialog.htm">object common properties</a><span>: there is now a stippled bounding box that encompasses all objects in the model hierarchy. </span></p>
<p><span>We select the two joints, the proximity sensor and the graph, then enable item<span> <strong>Ignored by model bounding box</strong></span></span><span><span> </span>and click<span> </span></span><strong>Apply to selection</strong><span>, in the same dialog: the model bounding box now ignores the two joints and the proximity sensor. Still in the same dialog, we disable<span> </span></span><strong>camera visibility layer</strong><span><span> </span>2, and enable<span> </span></span><strong>camera visibility layer</strong><span><span> </span>10 for the two joints and the force sensor: this effectively hides the two joints and the force sensor, since layers 9-16 are disabled by default. </span></p>
<p><span>At any time we can<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/layerSelectionDialog.htm">modify the visibility layers for the whole scene</a><span>. To finish the model definition, we select the vision sensor, the two wheels, the slider, and the graph, then enable item<span> </span></span><strong>Select base of model instead</strong><span>: if we now try to select an object in our model in the scene, the whole model will be selected instead, which is a convenient way to handle and manipulate the whole model as a single object.</span></p>
<p><span> Additionally, this protects the model against inadvertant modification. Individual objects in the model can still be selected in the scene by click-selecting them with control-shift, or normally selecting them in the scene hierarchy. We finally collapse the model tree in the scene hierarchy. This is what we have:</span></p>
<h4><span>新增 Vision Sensor</span></h4>
<p><span>Next we will add a vision sensor, at the same position and orientation as BubbleRob's proximity sensor. We open the model hierarchy again, then click [Menu bar --&gt; Add --&gt; Vision sensor --&gt; Perspective type], then attach the vision sensor to the proximity sensor, and set the local position and orientation of the vision sensor to (0,0,0). </span></p>
<p><span>We also make sure the vision sensor is not not visible, not part of the model bounding box, and that if clicked, the model will be selected instead. In order to customize the vision sensor, we open its properties dialog. We set the Far clipping plane item to 1, and the Resolution x and Resolution y items to 256 and 256. </span></p>
<p><span>We then open the vision sensor filter dialog by clicking Show filter dialog. We select the filter component Edge detection on work image and click Add filter. We position the newly added filter in second position (one position up, using the up button). We double-click the newly added filter component and adjust its Threshold item to 0.2, then click OK. We add a floating view to the scene, and over the newly added floating view, right-click [Popup menu --&gt; View --&gt; Associate view with selected vision sensor] (we make sure the vision sensor is selected during that process). </span></p>
<p><span>To be able to see the vision sensor's image, we start the simulation, then stop it again.<br/>The last thing that we need for our scene is a small child script that will control BubbleRob's behavior. We select bubbleRob and click [Menu bar --&gt; Add --&gt; Associated child script --&gt; Non threaded]. This just added a non-threaded child script to the scene, and associated it with bubbleRob. </span></p>
<p><span>We can also add, remove or modify scripts via the script dialog which can be opened with [Menu bar --&gt; Tools --&gt; Scripts] or through the appropriate toolbar button:</span></p>
<h4><span>Lua 控制程式</span></h4>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function sysCall_init()
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) -- this is bubbleRob's handle
    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") -- Handle of the left motor
    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") -- Handle of the right motor
    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") -- Handle of the proximity sensor
    minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    -- Create the custom UI:
        xml = '&lt;ui title="'..sim.getObjectName(bubbleRobBase)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
        &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;
        &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end

function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor
    -- If we detected something, we set the backward mode:
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end 

    if (backUntilTime&lt;sim.getSimulationTime()) then
        -- When in forward mode, we simply move forward at the desired speed
        sim.setJointTargetVelocity(leftMotor,speed)
        sim.setJointTargetVelocity(rightMotor,speed)
    else
        -- When in backward mode, we simply backup in a curve at reduced speed
        sim.setJointTargetVelocity(leftMotor,-speed/2)
        sim.setJointTargetVelocity(rightMotor,-speed/8)
    end
end

function sysCall_cleanup()
	simUI.destroy(ui)
end</pre>
<h4>Building Clean Model</h4>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm</a> </p>
<h4>Designing Dynamic Simulation</h4>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#staticAndRespondable">http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#staticAndRespondable</a> </p>
<h4>ResizeableFloor</h4>
<p>網際 Lua 程式執行環境: <a href="http://mde.tw/vecp2018/lua/SchoolProject/">http://mde.tw/vecp2018/lua/SchoolProject/</a> </p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    model=sim.getObjectAssociatedWithScript(sim.handle_self)
    e1=sim.getObjectHandle('ResizableFloor_5_25_element')
    e2=sim.getObjectHandle('ResizableFloor_5_25_visibleElement')
end

function sysCall_cleanup()
    hideDlg()
end

function sysCall_nonSimulation()
    local s=sim.getObjectSelection()
    if s and #s&gt;=1 and s[1]==model then
        showDlg()
    else
        hideDlg()
    end
end

function sysCall_beforeSimulation()
    hideDlg()
end

function sysCall_beforeSimulation()
    hideDlg()
end

function updateFloor()
    local c=readInfo()
    local sx=c['sizes'][1]/5
    local sy=c['sizes'][2]/5
    local sizeFact=sim.getObjectSizeFactor(model)
    sim.setObjectParent(e1,-1,true)
    local child=sim.getObjectChild(model,0)
    while child~=-1 do
        sim.removeObject(child)
        child=sim.getObjectChild(model,0)
    end
    local xPosInit=(sx-1)*-2.5*sizeFact
    local yPosInit=(sy-1)*-2.5*sizeFact
    local f1,f2
    for x=1,sx,1 do
        for y=1,sy,1 do
            if (x==1)and(y==1) then
                sim.setObjectParent(e1,model,true)
                f1=e1
            else
                f1=sim.copyPasteObjects({e1},0)[1]
                f2=sim.copyPasteObjects({e2},0)[1]
                sim.setObjectParent(f1,model,true)
                sim.setObjectParent(f2,f1,true)
            end
            local p=sim.getObjectPosition(f1,sim.handle_parent)
            p[1]=xPosInit+(x-1)*5*sizeFact
            p[2]=yPosInit+(y-1)*5*sizeFact
            sim.setObjectPosition(f1,sim.handle_parent,p)
        end
    end
end

function getDefaultInfoForNonExistingFields(info)
    if not info['version'] then
        info['version']=0
    end
    if not info['sizes'] then
        info['sizes']={1,1}
    end
end

function readInfo()
    local data=sim.readCustomDataBlock(model,'XYZ_FLOOR_INFO')
    if data then
        data=sim.unpackTable(data)
    else
        data={}
    end
    getDefaultInfoForNonExistingFields(data)
    return data
end

function writeInfo(data)
    if data then
        sim.writeCustomDataBlock(model,'XYZ_FLOOR_INFO',sim.packTable(data))
    else
        sim.writeCustomDataBlock(model,'XYZ_FLOOR_INFO','')
    end
end

function updateUi()
    local c=readInfo()
    local sizeFact=sim.getObjectSizeFactor(model)
    simUI.setLabelText(ui,1,'X-size (m): '..string.format("%.2f",c['sizes'][1]*sizeFact),true)
    simUI.setSliderValue(ui,2,c['sizes'][1]/5,true)
    simUI.setLabelText(ui,3,'Y-size (m): '..string.format("%.2f",c['sizes'][2]*sizeFact),true)
    simUI.setSliderValue(ui,4,c['sizes'][2]/5,true)
end

function sliderXChange(ui,id,newVal)
    local c=readInfo()
    c['sizes'][1]=newVal*5
    writeInfo(c)
    updateUi()
    updateFloor()
end

function sliderYChange(ui,id,newVal)
    local c=readInfo()
    c['sizes'][2]=newVal*5
    writeInfo(c)
    updateUi()
    updateFloor()
end

function closeEventHandler(h)
    sim.removeScript(sim.handle_self)
end

function showDlg()
    if not ui then
    xml = [[
&lt;ui title="Floor Customizer" closeable="true" on-close="closeEventHandler" resizable="false" activate="false"&gt;
    &lt;group layout="form" flat="true"&gt;
        &lt;label text="X-size (m): 1" id="1"/&gt;
        &lt;hslider tick-position="above" tick-interval="1" minimum="1" maximum="5" on-change="sliderXChange" id="2"/&gt;
        &lt;label text="Y-size (m): 1" id="3"/&gt;
        &lt;hslider tick-position="above" tick-interval="1" minimum="1" maximum="5" on-change="sliderYChange" id="4"/&gt;
    &lt;/group&gt;
    &lt;label text="" style="* {margin-left: 400px;}"/&gt;
&lt;/ui&gt;
]]
        ui=simUI.create(xml)
        if 2==sim.getInt32Parameter(sim.intparam_platform) then
            -- To fix a Qt bug on Linux
            sim.auxFunc('activateMainWindow')
        end
        updateUi()
    end
end

function hideDlg()
    if ui then
        simUI.destroy(ui)
        ui=nil
    end
end
</pre>
<p>左右輪分別建立 slider:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
         
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) -- this is bubbleRob's handle
    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") -- Handle of the left motor
    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") -- Handle of the right motor
    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") -- Handle of the proximity sensor
    minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    -- Create the custom UI:
    xml = '&lt;ui title="'..sim.getObjectName(bubbleRobBase)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
                &lt;label text="left motor speed" wordwrap="false" /&gt;
                &lt;hslider minimum="0" maximum="100" on-change="left_speedChange_callback" id="1"/&gt;
                &lt;label text="right motor speed" wordwrap="false" /&gt;
                &lt;hslider minimum="0" maximum="100" on-change="right_speedChange_callback" id="2"/&gt;
            &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    left_speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    right_speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(left_speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
    simUI.setSliderValue(ui,2,100*(left_speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
    
end
function right_speedChange_callback(ui,id,newVal)
    right_speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function left_speedChange_callback(ui,id,newVal)
    left_speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end


function sysCall_actuation() 
    result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor
    -- If we detected something, we set the backward mode:
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end 

    if (backUntilTime&lt;sim.getSimulationTime()) then
        -- When in forward mode, we simply move forward at the desired speed
        sim.setJointTargetVelocity(leftMotor,left_speed)
        sim.setJointTargetVelocity(rightMotor,right_speed)
    else
        -- When in backward mode, we simply backup in a curve at reduced speed
        sim.setJointTargetVelocity(leftMotor,-left_speed/2)
        sim.setJointTargetVelocity(rightMotor,-right_speed/8)
    end
end

function sysCall_cleanup() 
    simUI.destroy(ui)
end 
</pre>
<p></p>
<h3>BubbleRob1</h3>
<p>Sphere diameter: 0.2 m</p>
<p>Wheel cylinder: 0.08 m dia x 0.02 m, target velocity 50 deg/s, max torque 2.5 N.m</p>
<p>Slider diameter: 0.05 m</p>
<p>Proximity sensor: cone type, Offset 0.005 m, Angle 30 and Range 0.15 m</p>
<p>Obstacle cylinder: 0.1 m dia x 0.2 m</p>
<p><span>This tutorial will try to introduce quite many V-REP functionalities while designing the simple mobile robot </span><em>BubbleRob</em><span>. The V-REP scene file related to this tutorial is located in V-REP's installation folder's<span> </span></span><em>tutorials/BubbleRob</em><span><span> </span>folder. Following figure illustrates the simulation scene that we will design:</span></p>
<p><span><img alt="" height="455" src="/images/bubbleRob_completed.png" width="800"/></span></p>
<p>Since this tutorial will fly over many different aspects, make sure to also have a look at the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm">other tutorials</a>, mainly the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">tutorial about building a simulation model</a>. First of all, freshly start V-REP. The simulator displays a default<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/scenes.htm">scene</a>. We will start with the body of<span> </span><em>BubbleRob</em>.</p>
<p>We add a primitive sphere of diameter 0.2 to the scene with [Menu bar --&gt; Add --&gt; Primitive shape --&gt; Sphere]. We adjust the<span> </span><strong>X-size</strong><span> </span>item to 0.2, then click<span> </span><strong>OK</strong>. The created sphere will appear in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/layerSelectionDialog.htm">visibility layer</a><span> </span>1 by default, and be<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#staticAndRespondable">dynamic and respondable</a><span> </span>(since we kept the item<span> </span><strong>Create dynamic and respondable shape</strong><span> </span>enabled). This means that<span> </span><em>BubbleRob's</em><span> </span>body will be falling and able to react to collisions with other respondable shapes (i.e. simulated by the physics engine). We can see this is the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm">shape dynamics properties</a>: items<span> </span><strong>Body is respondable</strong><span> </span>and<span> </span><strong>Body is dynamic</strong><span> </span>are enabled. We start the simulation (via the toolbar button, or by pressing &lt;control-space&gt; in the scene window), and copy-and-paste the created sphere (with [Menu bar --&gt; Edit --&gt; Copy selected objects] then [Menu bar --&gt; Edit -&gt; Paste buffer], or with &lt;control-c&gt; then &lt;control-v&gt;): the two spheres will react to collision and roll away. We stop the simulation: the duplicated sphere will automatically be removed. This default behaviour can be modified in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/simulationPropertiesDialog.htm">simulation dialog</a>.</p>
<p>We also want the<span> </span><em>BubbleRob's</em><span> </span>body to by usable by the other calculation modules (e.g. the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/distanceCalculation.htm">minimum distance calculation module</a>). For that reason, we enable<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/collidableObjects.htm">Collidable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/measurableObjects.htm">Measurable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/renderableObjects.htm">Renderable</a></strong><span> </span>and<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/detectableObjects.htm">Detectable</a></strong><span> </span>in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/commonPropertiesDialog.htm">object common properties</a><span> </span>for that shape, if not already enabled. If we wanted, we could now also change the visual appearance of our sphere in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeProperties.htm">shape properties</a>.</p>
<p>Now we open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/positionDialog.htm">position dialog</a><span> </span>on the<span> </span><strong>translation</strong><span> </span>tab, select the sphere representing<span> </span><em>BubbleRob's</em><span> </span>body, and enter 0.02 for<span> </span><strong>Along Z</strong>. We make sure that the<strong>Relative to</strong>-item is set to<span> </span><strong>World</strong>. Then we click<span> </span><strong>Translate selection</strong>. This translates all selected objects by 2 cm along the absolute Z-axis, and effectively lifted our sphere a little bit. In the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/userInterface.htm#SceneHierarchy">scene hierarchy</a>, we double-click the sphere's name, so that we can edit its name. We enter<span> </span><em>bubbleRob</em><span> </span>and press enter.</p>
<p>Next we will add a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensors.htm">proximity sensor</a><span> </span>so that<span> </span><em>BubbleRob</em><span> </span>knows when it is approaching obstacles: we select [Menu bar --&gt; Add --&gt; Proximity sensor --&gt; Cone type]. In the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/orientationDialog.htm">orientation dialog</a><span> </span>on the<span> </span><strong>orientation</strong><span> </span>tab, we enter 90 for<span> </span><strong>Around Y</strong><span> </span>and for<span> </span><strong>Around Z</strong>, then click<span> </span><strong>Rotate selection</strong>. In the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/positionDialog.htm">position dialog</a>, on the<span> </span><strong>position</strong>tab, we enter 0.1 for<span> </span><strong>X-coord.</strong><span> </span>and 0.12 for<span> </span><strong>Z-coord.</strong><span> </span>The proximity sensor is now correctly positioned relative to<span> </span><em>BubbleRob's</em><span> </span>body. We double-click the proximity sensor's icon in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/userInterface.htm#SceneHierarchy">scene hierarchy</a><span> </span>to open<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensorPropertiesDialog.htm">its properties</a><span> </span>dialog. We click<span> </span><strong>Show volume parameter<span> </span></strong>to open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensorVolumeDialog.htm">proximity sensor volume dialog</a>. We adjust items<span> </span><strong>Offset</strong><span> </span>to 0.005,<span> </span><strong>Angle</strong><span> </span>to 30 and<span> </span><strong>Range</strong><span> </span>to 0.15. Then, in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensorPropertiesDialog.htm">proximity sensor properties</a>, we click<span> </span><strong>Show detection parameters</strong>. This opens the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/proximitySensorDetectionParameterDialog.htm">proximity sensor detection parameter dialog</a>. We uncheck item<span> </span><strong>Don't allow detections if distance smaller than</strong><span> </span>then close that dialog again. In the scene hierarchy, we double-click the proximity sensor's name, so that we can edit its name. We enter<span> </span><em>bubbleRob_sensingNose</em><span> </span>and press enter.</p>
<p><img alt="" height="331" src="/images/cone_type_proximity.png" width="362"/></p>
<p>We select<span> </span><em>bubbleRob_sensingNose</em>, then control-select<span> </span><em>bubbleRob</em>, then click [Menu bar --&gt; Edit --&gt; Make last selected object parent]. This attaches the sensor to the body of the robot. We could also have dragged<span> </span><em>bubbleRob_sensingNose</em><span> </span>onto<span> </span><em>bubbleRob</em><span> </span>in the scene hierarchy. This is what we now have:</p>
<p><img alt="" height="455" src="/images/sphere_with_proximity.png" width="800"/></p>
<p>Next we will take care of<span> </span><em>BubbleRob's</em><span> </span>wheels. We create a new scene with [Menu bar --&gt; File --&gt; New scene]. It is often very convenient to work across several scenes, in order to visualize and work only on specific elements. We add a pure primitive cylinder with dimensions (0.08,0.08,0.02). As for the body of<span> </span><em>BubbleRob</em>, we enable<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/collidableObjects.htm">Collidable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/measurableObjects.htm">Measurable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/renderableObjects.htm">Renderable</a></strong><span> </span>and<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/detectableObjects.htm">Detectable</a></strong><span> </span>in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/commonPropertiesDialog.htm">object common properties</a><span> </span>for that cylinder, if not already enabled. Then we set the cylinder's absolute position to (0.05,0.1,0.04) and its absolute orientation to (-90,0,0). We change the name to<span> </span><em>bubbleRob_leftWheel</em>. We copy and paste the wheel, and set the absolute Y coordinate of the copy to -0.1. We rename the copy to<span> </span><em>bubbleRob_rightWheel</em>. We select the two wheels, copy them, then switch back to scene 1, then paste the wheels.</p>
<p>We now need to add<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/joints.htm">joints</a><span> </span>(or motors) for the wheels. We click [Menu bar --&gt; Add --&gt; Joint --&gt; Revolute] to add a revolute joint to the scene. Most of the time, when adding a new object to the scene, the object will appear at the origin of the world. We Keep the joint selected, then control-select<span> </span><em>bubbleRob_leftWheel</em>. In the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/positionDialog.htm">position dialog</a>, on the<span> </span><strong>position</strong><span> </span>tab, we click the<span> </span><strong>Apply to selection</strong><span> </span>button: this positioned the joint at the center of the left wheel. Then, in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/orientationDialog.htm">orientation dialog</a>, on the<span> </span><strong>orientation</strong><span> </span>tab, we do the same: this oriented the joint in the same way as the left wheel. We rename the joint to<span> </span><em>bubbleRob_leftMotor</em>. We now double-click the joint's icon in the scene hierarchy to open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/jointProperties.htm">joint properties</a><span> </span>dialog. Then we click<span> </span><strong>Show dynamic parameters</strong><span> </span>to open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/jointDynamicsProperties.htm">joint dynamics properties</a>dialog. We<span> </span><strong>enable the motor</strong>, and check item<span> </span><strong>Lock motor when target velocity is zero</strong>. We now repeat the same procedure for the right motor and rename it to<span> </span><em>bubbleRob_rightMotor</em>. Now we attach the left wheel to the left motor, the right wheel to the right motor, then attach the two motors to<span> </span><em>bubbleRob</em>. This is what we have:</p>
<p><img alt="" height="455" src="/images/vrep_bubbleRob_with_wheel.png" width="800"/></p>
<p><span>We run the simulation and notice that the robot is falling backwards. We are still missing a third contact point to the floor. We now add a small slider (or caster). In a new scene we and add a pure primitive sphere with diameter 0.05 and make the sphere </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/collidableObjects.htm">Collidable</a></strong><span>,<span> </span></span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/measurableObjects.htm">Measurable</a></strong><span>,<span> </span></span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/renderableObjects.htm">Renderable</a></strong><span><span> </span>and<span> </span></span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/detectableObjects.htm">Detectable</a></strong><span><span> </span>(if not already enabled), then rename it to<span> </span></span><em>bubbleRob_slider</em><span>. We set the<span> </span></span><strong>Material</strong><span><span> </span>to<span> </span></span><em>noFrictionMaterial<span> </span></em><span>in the<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm">shape dynamics properties</a><span>. To rigidly link the slider with the rest of the robot, we add a</span><a href="http://www.coppeliarobotics.com/helpFiles/en/forceSensors.htm"><span> </span>force sensor object</a><span><span> </span>with [Menu bar --&gt; Add --&gt; Force sensor]. We rename it to<span> </span></span><em>bubbleRob_connection</em><span><span> </span>and shift it up by 0.05. We attach the slider to the force sensor, then copy both objects, switch back to scene 1 and paste them. We then shift the force sensor by -0.07 along the absolute X-axis, then attach it to the robot body. If we run the simulation now, we can notice that the slider is slightly moving in relation to the robot body: this is because both objects (i.e.<span> </span></span><em>bubbleRob_slider</em><span><span> </span>and<span> </span></span><em>bubbleRob</em><span>) are colliding with each other. To avoid strange effects during dynamics simulation, we have to inform V-REP that both objects do not mutually collide, and we do this in following way: in the<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm">shape dynamics properties</a><span>, for<span> </span></span><em>bubbleRob_slider</em><span><span> </span>we set the<span> </span></span><strong>local respondable mask</strong><span><span> </span>to 00001111, and for<span> </span></span><em>bubbleRob</em><span>, we set the</span><strong><span> </span>local respondable mask</strong><span><span> </span>to 11110000. If we run the simulation again, we can notice that both objects do not interfere anymore. This is what we now have:</span></p>
<p>We run the simulation again and notice that<span> </span><em>BubbleRob</em><span> </span>slightly moves, even with locked motor. We also try to run the simulation with different physics engines: the result will be different. Stability of dynamic simulations is tightly linked to masses and inertias of the involved non-static shapes. For an explanation of this effect, make sure to carefully read<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#masses">this</a><span> </span>and<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#inertias">that</a><span> </span>sections. We now try to correct for that undesired effect. We select the two wheels and the slider, and in the shape dynamics dialog we click three times<span> </span><strong>M=M*2 (for selection)</strong>. The effect is that all selected shapes will have their masses multiplied by 8. We do the same with the inertias of the 3 selected shapes, then run the simulation again: stability has improved. In the joint dynamics dialog, we set the<span> </span><strong>Target velocity</strong><span> </span>to 50 for both motors. We run the simulation:<span> </span><em>BubbleRob</em><span> </span>now moves forward and eventually falls off the floor. We reset the<span> </span><strong>Target velocity</strong><span> </span>item to zero for both motors.</p>
<p>The object<span> </span><em>bubbleRob</em><span> </span>is at the base of all<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/objects.htm">objects</a><span> </span>that will later form the<span> </span><em>BubbleRob</em><span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/models.htm">model</a>. We will define the model a little bit later. In the mean time, we want to define a collection of objects that represent<span> </span><em>BubbleRob</em>. For that we define a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/collections.htm">collection object</a>. We click [Menu bar --&gt; Tools --&gt; Collections] to open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/collectionsDialog.htm">collection dialog</a>. Alternatively we can also open the dialog by clicking the appropriate toolbar button:</p>
<p>In the collection dialog, we click<span> </span><strong>Add new collection</strong>. A new collection object appears in the list just below. For now the newly added collection is still empty (not defined). While the new collection item is selected in the list, select<span> </span><em>bubbleRob</em><span> </span>in the scene hierarchy, and then click<span> </span><strong>Add</strong><span> </span>in the collection dialog. Our collection is now defined as containing all objects of the hierarchy tree starting at the<span> </span><em>bubbleRob</em><span> </span>object (the collection's composition is displayed in the<span> </span><strong>Composing elements and attributes</strong><span> </span>section). To edit the collection name, we double-click it, and rename it to<span> </span><em>bubbleRob_collection</em>. We close the collection dialog.</p>
<p>At this stage we want to be able to track the minimum distance between BubbleRob and any other object. For that, we open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/distanceCalculation.htm">distance dialog</a><span> </span>with [Menu bar --&gt; Tools --&gt; Calculation module properties]. Alternatively we can also open the calculation module properties dialog with the appropriate toolbar button:</p>
<p>In the distance dialog, we click<span> </span><strong>Add new distance object</strong><span> </span>and select a distance pair:<span> </span><em>[collection] bubbleRob_collection - all other measurable objects in the scene</em>. This just added a distance object that will measure the smallest distance between collection<span> </span><em>bubbleRob_collection</em><span> </span>(i.e. any<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/measurableObjects.htm">measurable object</a><span> </span>in that collection) and any other measurable object in the scene. We rename the distance object to<span> </span><em>bubbleRob_distance</em><span> </span>with a double-click in its name. We close the distance dialog. When we now run the simulation, we won't see any difference, since the distance object will try to measure (and display) the smallest distance segment between<span> </span><em>BubbleRob</em><span> </span>and any other measurable object in the scene. The problem is that at this stage there is no other measurable object in the scene (the shape defining the floor has its measurable property turned off by default). At a later stage in this tutorial, we will add obstacles to our scene.</p>
<p>Next we are going to add a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/graphs.htm">graph object</a><span> </span>to<span> </span><em>BubbleRob</em><span> </span>in order to display above smallest distance, but also<span> </span><em>BubbleRob's</em><span> </span>trajectory over time. We click [Menu bar --&gt; Add --&gt; Graph] and rename it to<span> </span><em>bubbleRob_graph</em>. We attach the graph to<span> </span><em>bubbleRob</em>, and set the graph's absolute coordinates to (0,0,0.005). Now we open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/graphPropertiesDialog.htm">graph properties</a><span> </span>dialog by double-clicking its icon in the scene hierarchy. We uncheck<span> </span><strong>Display XYZ-planes</strong>, then click<span> </span><strong>Add new data stream to record</strong><span> </span>and select<span> </span><strong>Object: absolute x-position</strong><span> </span>for the<span> </span><strong>Data stream type</strong>, and<span> </span><em>bubbleRob_graph</em><span> </span>for the<span> </span><strong>Object / item to record</strong>. An item has appeared in the<span> </span><strong>Data stream recording list</strong>. That item is a data stream of<span> </span><em>bubbleRob_graph's</em><span> </span>absolute x-coordinate (i.e. the<span> </span><em>bubbleRobGraph's</em><span> </span>object absolute x position will be recorded). Now we also want to record the y and z positions: we add those data streams in a similar way as above. We now have 3 data streams that represent BubbleRob's x-, y- and z-trajectories. We are going to add one more data stream so that we are able to track the minimum distance between our robot and its environment: we click<span> </span><strong>Add new data stream to record</strong><span> </span>and select<span> </span><strong>Distance: segment length</strong><span> </span>for the<span> </span><strong>Data stream type</strong>, and<span> </span><em>bubbleRob_distance</em><span> </span>for the<span> </span><strong>Object / item to record</strong>. In the<span> </span><strong>Data stream recording list</strong>, we now rename Data to bubbleRob_x_pos, Data0 to bubbleRob_y_pos, Data1 to bubbleRob_z_pos, and Data2 to bubbleRob_obstacle_dist.</p>
<p>We select<span> </span><em>bubbleRob_x_pos</em><span> </span>in the<span> </span><strong>Data Stream recording list</strong><span> </span>and in the<span> </span><strong>Time graph properties</strong><span> </span>section, uncheck<span> </span><strong>Visible</strong>. We do the same for<span> </span><em>bubbleRob_y_pos</em><span> </span>and<span> </span><em>bubbleRob_z_pos</em>. By doing so, only the<span> </span><em>bubbleRob_obstacle_dist</em><span> </span>data stream will be visible in a time graph. Following is what we should have:</p>
<p>Next we will set-up a 3D curve that displays<span> </span><em>BubbleRob's</em><span> </span>trajectory: we click<span> </span><strong>Edit 3D curves</strong><span> </span>to open the<a href="http://www.coppeliarobotics.com/helpFiles/en/graphCurvePropertiesDialog.htm"><span> </span>XY graph and 3D curve dialog</a>, then click<span> </span><strong>Add new curve</strong>. In the dialog that pops open, we select<span> </span><em>bubbleRob_x_pos</em><span> </span>for the<span> </span><strong>X-value</strong><span> </span>item,<span> </span><em>bubbleRob_y_pos</em><span> </span>for the<span> </span><strong>Y-value</strong><span> </span>item and<span> </span><em>bubbleRob_z_pos</em><span> </span>for the<span> </span><strong>Z-value</strong><span> </span>item. We rename the newly added curve from<span> </span><em>Curve</em><span> </span>to bubbleRob_path. Finally, we check the<span> </span><strong>Relative to world</strong><span> </span>item and set<span> </span><strong>Curve width</strong><span> </span>to 4:</p>
<p>We close all dialogs related to graphs. Now we set one motor<span> </span><strong>target velocity</strong><span> </span>to 50, run the simulation, and will see<span> </span><em>BubbleRob's</em><span> </span>trajectory displayed in the scene. We then stop the simulation and reset the motor target velocity to zero.</p>
<p>We add a pure primitive cylinder with following dimensions: (0.1, 0.1, 0.2). We want this cylinder to be static (i.e. not influenced by gravity or collisions) but still exerting some collision responses on non-static respondable shapes. For this, we disable<span> </span><strong>Body is dynamic</strong><span> </span>in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/shapeDynamicsProperties.htm">shape dynamics properties</a>. We also want our cylinder to be<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/collidableObjects.htm">Collidable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/measurableObjects.htm">Measurable</a></strong>,<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/renderableObjects.htm">Renderable</a></strong><span> </span>and<span> </span><strong><a href="http://www.coppeliarobotics.com/helpFiles/en/detectableObjects.htm">Detectable</a></strong>. We do this in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/commonPropertiesDialog.htm">object common properties</a>. Now, while the cylinder is still selected, we click the object translation toolbar button:</p>
<p>Now we can drag any point in the scene: the cylinder will follow the movement while always being constrained to keep the same Z-coordinate. We copy and paste the cylinder a few times, and move them to positions around<span> </span><em>BubbleRob</em><span> </span>(it is most convenient to perform that while looking at the scene from the top). During object shifting, holding down the shift key allows to perform smaller shift steps. Holding down the ctrl key allows to move in an orthogonal direction to the<span> </span><em>regular</em>direction(s). When done, select the camera pan toolbar button again:</p>
<p>We set a<span> </span><strong>target velocity</strong><span> </span>of 50 for the left motor and run the simulation: the graph view now displays the distance to the closest obstacle and the distance segment is visible in the scene too. We stop the simulation and reset the target velocity to zero.</p>
<p>We now need to finish<span> </span><strong>BubbleRob</strong><span> </span>as a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/models.htm">model</a><span> </span>definition. We select the model base (i.e. object<span> </span><em>bubbleRob</em>) then check items<span> </span><strong>Object is model base</strong><span> </span>and<span> </span><strong>Object/model can transfer or accept DNA</strong><span> </span>in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/commonPropertiesDialog.htm">object common properties</a>: there is now a stippled bounding box that encompasses all objects in the model hierarchy. We select the two joints, the proximity sensor and the graph, then enable item<span> </span><strong>Don't show as inside model selection</strong><span> </span>and click<span> </span><strong>Apply to selection</strong>, in the same dialog: the model bounding box now ignores the two joints and the proximity sensor. Still in the same dialog, we disable<span> </span><strong>camera visibility layer</strong><span> </span>2, and enable<span> </span><strong>camera visibility layer</strong><span> </span>10 for the two joints and the force sensor: this effectively hides the two joints and the force sensor, since layers 9-16 are disabled by default. At any time we can<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/layerSelectionDialog.htm">modify the visibility layers for the whole scene</a>. To finish the model definition, we select the vision sensor, the two wheels, the slider, and the graph, then enable item<span> </span><strong>Select base of model instead</strong>: if we now try to select an object in our model in the scene, the whole model will be selected instead, which is a convenient way to handle and manipulate the whole model as a single object. Additionally, this protects the model against inadvertant modification. Individual objects in the model can still be selected in the scene by click-selecting them with control-shift, or normally selecting them in the scene hierarchy. We finally collapse the model tree in the scene hierarchy. This is what we have:</p>
<p>Next we will add a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/visionSensors.htm">vision sensor</a>, at the same position and orientation as<span> </span><em>BubbleRob's</em><span> </span>proximity sensor. We open the model hierarchy again, then click [Menu bar --&gt; Add --&gt; Vision sensor --&gt; Perspective type], then attach the vision sensor to the proximity sensor, and set the local position and orientation of the vision sensor to (0,0,0). We also make sure the vision sensor is not not visible, not part of the model bounding box, and that if clicked, the model will be selected instead. In order to customize the vision sensor, we open<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/visionSensorPropertiesDialog.htm">its properties</a><span> </span>dialog. We set the<span> </span><strong>Far clipping plane</strong><span> </span>item to 1, and the<span> </span><strong>Resolution x</strong><span> </span>and<span> </span><strong>Resolution y</strong><span> </span>items to 256 and 256. We then open the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/visionSensorFilterDialog.htm">vision sensor filter dialog</a><span> </span>by clicking<span> </span><strong>Show filter dialog</strong>. We select the filter component<span> </span><strong>Edge detection on work image</strong><span> </span>and click<span> </span><strong>Add filter</strong>. We position the newly added filter in second position (one position up, using the<span> </span><strong>up</strong><span> </span>button). We double-click the newly added filter component and adjust its<span> </span><strong>Threshold</strong><span> </span>item to 0.2, then click<span> </span><strong>OK</strong>. We add a floating view to the scene, and over the newly added floating view, right-click [Popup menu --&gt; View --&gt; Associate view with selected vision sensor] (we make sure the vision sensor is selected during that process). To be able to see the vision sensor's image, we start the simulation, then stop it again.</p>
<p>The last thing that we need for our scene is a small<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/childScripts.htm">child script</a><span> </span>that will control<span> </span><em>BubbleRob's</em><span> </span>behavior. We select<span> </span><em>bubbleRob</em><span> </span>and click [Menu bar --&gt; Add --&gt; Associated child script --&gt; Non threaded]. This just added a<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/childScripts.htm#nonThreaded">non-threaded child script</a><span> </span>to the scene, and associated it with<span> </span><em>bubbleRob</em>. We can also add, remove or modify scripts via the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/scriptProperties.htm">script dialog</a><span> </span>which can be opened with [Menu bar --&gt; Tools --&gt; Scripts] or through the appropriate toolbar button:</p>
<p><span>We double-click the little script icon that appeared next to </span><em>bubbleRob's</em><span><span> </span>name in the scene hierarchy: this opens the child script that we just added. We copy and paste following code into the<span> </span></span><a href="http://www.coppeliarobotics.com/helpFiles/en/scriptEditor.htm">script editor</a><span>, then close it:</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function sysCall_init()
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) -- this is bubbleRob's handle
    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") -- Handle of the left motor
    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") -- Handle of the right motor
    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") -- Handle of the proximity sensor
    minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    -- Create the custom UI:
        xml = '&lt;ui title="'..sim.getObjectName(bubbleRobBase)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
        &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;
        &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end

function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor
    -- If we detected something, we set the backward mode:
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end 

    if (backUntilTime&lt;sim.getSimulationTime()) then
        -- When in forward mode, we simply move forward at the desired speed
        sim.setJointTargetVelocity(leftMotor,speed)
        sim.setJointTargetVelocity(rightMotor,speed)
    else
        -- When in backward mode, we simply backup in a curve at reduced speed
        sim.setJointTargetVelocity(leftMotor,-speed/2)
        sim.setJointTargetVelocity(rightMotor,-speed/8)
    end
end

function sysCall_cleanup()
	simUI.destroy(ui)
end</pre>
<p><span></span></p>
<p>We run the simulation.<span> </span><em>BubbleRob</em><span> </span>now moves forward while trying to avoid obstacles (in a very basic fashion). While the simulation is still running, change<span> </span><em>BubbleRob's</em><span> </span>velocity, and copy/paste it a few times. Also try to scale a few of them while the simulation is still running. Be aware that the minimum distance calculation functionality might be heavily slowing down the simulation, depending on the environment. You can turn that functionality on and off in the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/distanceCalculation.htm">distance dialog</a>, by checking / unchecking the<span> </span><strong>Enable all distance calculations</strong><span> </span>item.</p>
<p>Using a script to control a robot or model is only one way of doing. V-REP offers many different ways (also combined), have a look at the<span> </span><a href="http://www.coppeliarobotics.com/helpFiles/en/externalControllerTutorial.htm">external controller tutorial</a>.</p>
<h4>Reference</h4>
<p><a href="/downloads/Kinematic_model_of_three_wheeled_mobile_robot.pdf">Kinematic_model_of_three_wheeled_mobile_robot.pdf</a></p>
<p><a href="/downloads/mobile_robot_kinematics.pdf">mobile_robot_kinematics.pdf</a></p>
<p><a href="/downloads/Kinematic Control of Underwater Robotic System.pdf">Kinematic Control of Underwater Robotic System.pdf</a></p>
<h2>實習任務三</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm</a> </p>
<p>機械設計中的 Kinematic and Dynamic Modeling 中有許多建立模型的技巧, 在運用 <a href="http://www.coppeliarobotics.com/">V-rep</a> 進行運動與動態模擬的過程中, 除了利用 <a href="http://solvespace.com">Solvespace</a> 或 <a href="https://www.onshape.com/">OnShape</a> 繪製系統所牽涉的零組件外, 還必須考慮模擬過程的實用性, 意即在機械系統概念設計初步階段, 必須要先掌握各零組件基本的運動與動態特性, 不必將零組件仍無法明確設計的特徵尺寸置入.</p>
<p>在這個實習任務中, 可以學習如何建立適用於 <a href="http://www.coppeliarobotics.com/">V-rep</a> 的零件模型.</p>
<h4>延伸任務</h4>
<p><a href="https://www.freecadweb.org/">https://www.freecadweb.org/</a> 目前已經能夠支援利用 Python3 程式建立模型 (<a href="https://www.freecadweb.org/wiki/Python_3">註 1</a>, <a href="https://forum.freecadweb.org/viewtopic.php?t=30218">2</a>, <a href="https://github.com/FreeCAD/pivy">3</a>), 當建立與機械設計運動及動態模擬過程中, 最佳的零組件提供方案, 是透過各商用 MCAD 套件的 API 環境, 以電腦程式建構零組件, 因為此舉可以將更多與機械設計流程考量的約束條件置入, 以整合性更高的方式進行機械設計.</p>
<p>不過目前各商用 MCAD 套件的網際 API 程式環境較高, 此處希望以 <a href="http://solvespace.com">Solvespace</a> 中的 Solver (<a href="https://github.com/KmolYuan/python-solvespace">https://github.com/KmolYuan/python-solvespace</a>), 或 <a href="https://www.freecadweb.org/">FreeCAD</a> 作為範例, 嘗試以可攜程式方法結合 <a href="http://www.coppeliarobotics.com/">V-rep</a>, 自行建立所需的網際協同機械設計環境.</p>
<p>其他有關 Onshape 的 API 參考:</p>
<p style="padding-left: 30px;"><a href="https://forum.onshape.com/discussion/4030/where-can-i-find-the-apis-and-api-documentation-for-onshape-how-much-functionality-the-apis-cover">https://forum.onshape.com/discussion/4030/where-can-i-find-the-apis-and-api-documentation-for-onshape-how-much-functionality-the-apis-cover</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/onshape-public/apikey">https://github.com/onshape-public/apikey</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/onshape-public/app-windows-sample">https://github.com/onshape-public/app-windows-sample</a> </p>
<p></p>
<h2>實習任務四</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/lineFollowingBubbleRobTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/lineFollowingBubbleRobTutorial.htm</a> </p>
<h4>延伸應用</h4>
<p>以 Python 控制 V-rep 模型: <a href="http://fid.cl/courses/ai-robotics/vrep-tut/pythonBubbleRob.pdf">http://fid.cl/courses/ai-robotics/vrep-tut/pythonBubbleRob.pdf</a> (<a href="/downloads/pythonBubbleRob.pdf">pythonBubbleRob.pdf</a>)</p>
<p>e-puck 控制範例: data/v-rep/e-puck_control_ex/</p>
<h2>實習任務五</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm</a> </p>
<h2>實習任務六</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/externalControllerTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/externalControllerTutorial.htm</a> </p>
<p><a href="https://github.com/kmolab/pymcadp/tree/gh-pages/data/v-rep/vrep-api-python-demo">https://github.com/kmolab/pymcadp/tree/gh-pages/data/v-rep/vrep-api-python-demo</a> </p>
<p></p>
<h1>協同設計</h1>
<p>協同產品設計實習的三項內容管理系統 (Content Management Systems) 包含</p>
<p><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> (循序頁面電子書) - 各組網際協同產品設計規劃與使用說明電子書</p>
<p><a href="https://revealjs.com/#/">Reveal</a> (網際簡報系統) - 每一協同設計階段完成的簡要報告</p>
<p><a href="https://blog.getpelican.com/">Pelican Blog</a> (靜態網誌) - 依照日期紀錄各協同階段工作內容與結論</p>
<p>下載可攜程式環境: <a href="https://drive.google.com/file/d/1Cw8mHRcHKIZj7K7_m6x_af4vzo89539a/view?usp=sharing">kmol_2019.7z</a> (380MB, 解開約 1.5 GB)</p>
<h4>開發要點</h4>
<ol>
<li>多人協同編輯的 CMSimfly</li>
<li>近端網際 Reveal 編輯環境</li>
<li>更容易使用的 Pelican 靜態網誌轉換系統</li>
</ol>
<h4>機械設計內容表達</h4>
<p>利用 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 進行口語、文字、2D 靜態檔案、3D 與動態影音、數學與實體表達.</p>
<p>口語表達 - 透過 Reveal.js 簡報協助隨時進行機械設計內容介紹與解說.</p>
<p>文字表達 - 編寫在內容管理系統中的中英文資料.</p>
<p>2D 靜態檔案 - images 與 pdf  等靜態檔案.</p>
<p>3D 與動態影音 - X3D, three.js 或 mp4 等動態資料.</p>
<p>數學表達 - 在內容管理系統中提供與機械設計相關的數學表示式及數學模型.</p>
<p>實體表達 - 將上述各階段所說明的機械設計系統零組件檔案, 經由實際加工製作成實體, 後以其他表達方式進行說明與介紹.</p>
<p></p>
<h1>Onshape</h1>
<h4>特性</h4>
<p>現有免費的整合 CAX 系統, 應力分析, render, CAM?</p>
<p>Featurescript 在協同產品開發流程中的角色</p>
<p><a href="https://github.com/onshape">https://github.com/onshape</a> </p>
<h2>BOMs</h2>
<p><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx</a>  (<a href="/downloads/FirstLook_OnshapeEnterprise _ ENGINEERING_com.pdf">pdf</a>)</p>
<h4>發布管理</h4>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Release_management">https://en.wikipedia.org/wiki/Release_management</a> </p>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16672/Onshape-Adds-Release-Management-Revamps-BOMs.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16672/Onshape-Adds-Release-Management-Revamps-BOMs.aspx</a>  (<a href="/downloads/OnshapeAddsReleaseManagementRevampsBOMs _ ENGINEERING_com.pdf">pdf</a>)</p>
<h4>參數建模與直接建模</h4>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16587/Whats-the-Difference-Between-Parametric-and-Direct-Modeling.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16587/Whats-the-Difference-Between-Parametric-and-Direct-Modeling.aspx</a>  (<a href="/downloads/What’s theDifferenceBetweenParametric_and_DirectModeling_ENGINEERING_com.pdf">pdf</a>)</p>
<p style="padding-left: 30px;"><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16304/We-Just-Remade-Parametric-Modeling-Says-Onshape.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16304/We-Just-Remade-Parametric-Modeling-Says-Onshape.aspx</a>  (<a href="/downloads/WeJustRemadeParametricModelingSaysOnshape _ ENGINEERING_com.pdf">pdf</a>)</p>
<p><a href="/downloads/現代CAD機器設計.pdf">現代CAD機器設計.pdf</a></p>
<p><a href="/downloads/精通3D模擬.pdf">精通3D模擬.pdf</a></p>
<p><a href="/downloads/2018CAD技術趨勢.pdf">2018CAD技術趨勢.pdf</a></p>
<p><a href="/downloads/開解設計僵局.pdf">開解設計僵局.pdf</a></p>
<p><a href="/downloads/技術提示1.pdf">技術提示1.pdf</a></p>
<p><a href="/downloads/敏捷產品設計簡介.pdf">敏捷產品設計簡介.pdf</a></p>
<p><a href="/downloads/NI_Mechatronics_Machine_Design_Guide.pdf">NI_Mechatronics_Machine_Design_Guide.pdf</a></p>
<p>c-k theory: <a href="https://mde1a1.kmol.info/2017fall/wiki?name=c-k+design+theory">https://mde1a1.kmol.info/2017fall/wiki?name=c-k+design+theory</a> </p>
<p></p>
<h1>FreeCAD</h1>
<p><a href="https://drive.google.com/file/d/149LTLypC9eeStWfrlLceAkozZq4F8A_r/view?usp=sharing">FreeCAD 0.18.7z for Windows 10 64 位元 下載</a></p>
<p>上述系統內建 python36.exe, 若與 wscite 合用, 需要 Python 3.6 版次中的 pythonw.exe (<a href="/downloads/pythonw_36.7z">下載 pythonw_36.7z</a>)</p>
<p>測試程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import FreeCAD, Part
import FreeCADGui

FreeCADGui.showMainWindow()
mw=FreeCADGui.getMainWindow()
mw.hide()

obj=Part.makeCone(10,8,10)
doc = FreeCAD.newDocument()
Part.show(obj)

view = FreeCADGui.getDocument(doc.Name).activeView()
view.setAnimationEnabled(False)
view.viewAxometric()
view.fitAll()

# It's important not to use Qt's QGLFramebufferObject because it crashes when no GUI is shown
# but Qt's QGLPixelBuffer still works.
par=FreeCAD.ParamGet("User parameter:BaseApp")
grp=par.GetGroup("Preferences/Document")
grp.SetBool("DisablePBuffers",False)

view.saveImage('crystal.png',800,600,'Current')
FreeCAD.closeDocument(doc.Name)</pre>
<p>建立零件, 轉為 stl  檔案:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import FreeCAD
import Part
import Mesh
shape = Part.makeCone(10,8,10)
doc = App.newDocument('Doc')
pf = doc.addObject("Part::Feature","MyShape")
pf.Shape = shape
Mesh.export([pf], 'my_cone.stl')</pre>
<p>利用布林運算建立零件後, 轉為 stl 檔案:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import FreeCAD, FreeCADGui, Part , Mesh
from FreeCAD import Base
import math
steps=360 #number of polyline segments
dang=math.radians(360/steps) #step angle
e=10 #eccentricity
r=60 #radius
ang=0 #start anle
z=0 #line z coordinate
halfw=r+e+20
halfh=r+e+20

for i in range(steps): #make many lines and connect they in wire (polyline, epitrochoid)
    if i==0: #for first line
        x1=e*math.cos(3*ang)+r*math.cos(ang) #coords for line startpoint
        y1=e*math.sin(3*ang)+r*math.sin(ang)
        ang=dang 
        x2=e*math.cos(3*ang)+r*math.cos(ang) #coords for line endpoint
        y2=e*math.sin(3*ang)+r*math.sin(ang)
        seg=Part.makeLine((x1,y1,z),(x2,y2,z))
        wire2=Part.Wire([seg])
        x1=x2
        y1=y2
    else: 
        x2=e*math.cos(3*ang)+r*math.cos(ang)
        y2=e*math.sin(3*ang)+r*math.sin(ang)
        seg=Part.makeLine((x1,y1,z),(x2,y2,z))
        wire2=Part.Wire([wire2,seg])
        x1=x2
        y1=y2
    ang=ang+dang #increment angle

edge1 = Part.makeLine((-halfw,halfh,0), (halfw,halfh,0)) #lines needed to create rectangle
edge2 = Part.makeLine((halfw,halfh,0), (halfw,-halfh,0))
edge3 = Part.makeLine((halfw,-halfh,0), (-halfw,-halfh,0))
edge4 = Part.makeLine((-halfw,-halfh,0), (-halfw,halfh,0))
wire1 = Part.Wire([edge1,edge2,edge3,edge4]) #rectangle
face1 = Part.Face(wire1) #face from rectangle
face2=Part.Face(wire2) #face from epitrochoid http://en.wikipedia.org/wiki/Epitrochoid
diff = face1.cut(face2) #boolean cut epitrochoid from rectangle
ext=diff.extrude(Base.Vector(0,0,30)) #extrude the cut (face)
#Part.show(ext) #show extrude in FreeCAD window
doc = App.newDocument('Doc')
pf = doc.addObject("Part::Feature","MyShape")
pf.Shape = ext
Mesh.export([pf], 'my_ext.stl')</pre>
<p></p>
<h2>FreeCAD STL</h2>
<p><span>利用以下 FreeCAD Python 程式所建立的零件 STL檔案:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import FreeCAD
import Part
import Mesh
shape = Part.makeCone(10,8,10)
doc = App.newDocument('Doc')
pf = doc.addObject("Part::Feature","MyShape")
pf.Shape = shape
Mesh.export([pf], 'my_cone.stl')</pre>
<p><iframe height="600" src="/static/viewstl.html?src=/downloads/my_cone.stl" width="800"></iframe></p>
<h1>V-rep</h1>
<p>source: <a href="http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator">http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator</a> </p>
<p>Now that you have the<span> </span><a class="external text" href="https://github.com/NxRLab/ModernRobotics" rel="nofollow">MR code library</a>, you need the cross-platform V-REP robot simulator to allow you to visualize the motions of robots.<span> </span><b>You should complete the items on this page before moving on with the rest of the course!</b><span> </span>Click on any of the images to make them larger.</p>
<p><b>V-REP is computationally intensive. To minimize power usage, make sure to "pause" or "stop" a simulation when you are not using it.</b></p>
<p><b>1.</b><span> </span>Go to<span> </span><a class="external free" href="http://www.coppeliarobotics.com/" rel="nofollow">http://www.coppeliarobotics.com/</a><span> </span>and download and install the free V-REP PRO EDU software for your operating system.</p>
<p><b>2.</b><span> </span>Launch V-REP and experiment with it. I suggest you choose File &gt; Open scene... and open one of the example "scenes" that comes with V-REP. V-REP "scenes" are specifications of environments, robots, and their actions, and when you press the "play" button the simulation begins. Experimenting with these scenes will show you some of the capabilities of V-REP. For example, you could choose the "motionPlanningAndGrasping.ttt" scene, as shown in the image below. (All scene files end in .ttt.)</p>
<p><img alt="" height="534" src="/images/700px-VREP-demo-open.png" width="700"/></p>
<p><a href="/downloads/v-rep_remoteapi_ex.7z">v-rep_remoteapi_ex.7z</a></p>
<h2>V-rep Tutorial</h2>
<p><a href="http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm">http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm</a> </p>
<p>V-rep Tutorial:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/RZ-TCmL55c8" width="560"></iframe><span></span></p>
<p>Line Following Robot:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/xI-ZEewIzzI" width="560"></iframe><span></span></p>
<p>V-rep Scripts Writing:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/Zt21o1qsOB4" width="560"></iframe><span></span></p>
<p>Python Robot Simulation:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/SQont-mTnfM" width="560"></iframe><span></span></p>
<p>Path Planning:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/OfpB87pRoUk" width="560"></iframe><span></span></p>
<p>Dynamic Module:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/h9DXTRUmEEE" width="560"></iframe><span></span></p>
<p>V-rep Introduction and Bump Sensors:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/w68jmN1IBpo" width="560"></iframe><span></span></p>
<p>Inverse Kinematics:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/X73NzCc2E2c" width="560"></iframe><span></span></p>
<p>scene 模擬場景 - 包含環境與各種物件</p>
<p>scene object 場景中的物件 [http://www.coppeliarobotics.com/helpFiles/en/objects.htm] 包含</p>
<p>shape 零組件形體</p>
<p>camera 攝影機</p>
<p>light 光源</p>
<p>dummy 虛體 - 由一個有方位的點表示,沒有形體內容但具有形體性質的特殊物件</p>
<p>graph 圖形</p>
<p>path 路徑</p>
<p>mirror 鏡</p>
<p>point cloud 點雲</p>
<p>joint 軸</p>
<p>proximity sensor 近接感測器</p>
<p>vision sensor 視覺感測器</p>
<p>force/torque sensor 力/矩感測器</p>
<p>mill 銑</p>
<p>octree 八叉樹狀結構</p>
<p>model 場景中的模型</p>
<p>page 頁 - 每一個場景至多內置 8 個頁面, 每一個頁面則可以內置不限數量的視圖 (views), 頁面可視為視圖的容器.</p>
<p>view 視圖 - 透過攝影機、圖型或視覺感測器取的資料, 用於顯示場景內容.</p>
<h4>Main Script</h4>
<p>A main script is a simulation script. By default, each scene in V-REP will have one main script. It contains the basic code that allows a simulation to run. Without main script, a running simulation won't do anything.</p>
<p>The main script is called at each simulation step exactly one time. In addition to that, it is called once during initialization (at the start of a simulation), and once during restoration (at the end of a simulation). Thus, the default main script is segmented in 3 parts:</p>
<h4>the initialization part</h4>
<p><span>: this part will be executed one time just at the beginning of a simulation. The code is in charge of preparing a simulation, etc.</span></p>
<h4>the regular part</h4>
<p><span>: this part will be executed at each simulation pass. The code is in charge of handling all the functionality of the simulator (inverse kinematics, proximity sensors, collision detection, dynamics, etc.) in a generic way. Two commands are of particular interest: simLaunchThreadedChildScripts and simHandleChildScripts. simLaunchThreadedChildScripts launches threaded child scripts, while simHandleChildScripts runs non-threaded child scripts. Without those commands, child scripts won't be executed, and specific model functionality or behavior won't operate. The regular part is divided into an actuation (or action/reaction) section and a sensing (or probing) section.</span></p>
<h4>the restoration part</h4>
<p><span>: this part will be executed one time just before a simulation ends. The code is in charge of restoring object's initial configuration, clearing sensor stat</span></p>
<h2>v-rep ref</h2>
<p><a href="http://mde.tw/2017springcd/blog/vrep-planar-mechanism-simulation.html">http://mde.tw/2017springcd/blog/vrep-planar-mechanism-simulation.html</a> </p>
<p><a href="http://mde.tw/2017springcd/blog/vrep-introduction.html">http://mde.tw/2017springcd/blog/vrep-introduction.html</a> </p>
<p><a href="http://mde.tw/cadp2018/content/V-rep.html">http://mde.tw/cadp2018/content/V-rep.html</a> </p>
<h1>Webots</h1>
<h4>Webots 倉儲</h4>
<p style="padding-left: 30px;"><a href="https://github.com/omichel/webots">https://github.com/omichel/webots</a> </p>
<h4>Webots 開源宣告</h4>
<p style="padding-left: 30px;">在 <a href="https://www.epfl.ch/en/home/">https://www.epfl.ch/en/home/</a> (洛桑聯邦理工學院, <a href="https://www.youtube.com/user/epflnews/videos">Youtube</a>) 開發的 <a href="https://en.wikipedia.org/wiki/Webots">Webots</a> 終於在 2018 年底, <a href="https://cyberbotics.com/doc/blog/Webots-2019-a-release">宣布</a>以開源釋出, 並且採用 <a href="https://github.com/omichel/webots/blob/master/LICENSE">Apache 2.0 license</a>, 相較於 V-rep 目前區分教育版免費, 但商用必須付費的使用授權寬鬆許多.</p>
<p style="padding-left: 30px;">Webots 於 2018.12.18 寫道:</p>
<p style="padding-left: 30px;">After 20 years as proprietary software, with the release of version <a href="https://github.com/omichel/webots/releases/tag/R2019a">R2019a</a> Webots is now fully open-source, under the <a href="https://github.com/omichel/webots/blob/master/LICENSE">Apache 2.0 License</a>! We have made this change as <span style="background-color: #ffff00;">we believe that making our software as accessible as possible is the best way for robotics research to advance</span>. As a result, we will no longer be selling licenses, as anyone can install and use Webots completely free of charge. However, we will continue to support any users with active Premier service for the duration of said service.</p>
<p style="padding-left: 30px;">We will be shifting our efforts towards offering bespoke consulting, training and support services to Webots users, to use our expertise to develop and enhance user simulations. The source code for Webots is now publicly available on <a href="https://github.com/omichel/webots">GitHub</a>, and we will welcome any and all contributions from users. We are excited for this next chapter of Webots' life and we hope you will join us in our continued goal to make cutting-edge robotics research as accessible and practical as possible.</p>
<h4>Webots 網際介面</h4>
<p style="padding-left: 30px;">Webots 還提供 <a href="https://cyberbotics.com/doc/guide/web-interface">Web Interface</a>, 允許透過網際介面操控所模擬的機器系統.</p>
<h4>Webots 可攜程式下載</h4>
<p style="padding-left: 30px;">KMOL <a href="https://drive.google.com/file/d/1AqmudowMcuUSD6Qr-4x3qzKOztja51wo/view?usp=sharing">2019_webots.7z</a> 下載</p>
<h4>Webots 改版說明</h4>
<p style="padding-left: 30px;">Change logs: <a href="https://cyberbotics.com/ChangeLogR2018.html">https://cyberbotics.com/ChangeLogR2018.html</a></p>
<h4>Webots Development</h4>
<p style="padding-left: 30px;"><a href="https://github.com/omichel/webots/wiki">https://github.com/omichel/webots/wiki</a></p>
<h4>Robot Benchmark</h4>
<p style="padding-left: 30px;"><a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></p>
<h4>Webots 參考資料</h4>
<p style="padding-left: 30px;"><a href="/downloads/vrml97specification.pdf">vrml97specification.pdf</a> (1997)</p>
<p style="padding-left: 30px;"><a href="/downloads/vrml_primer_tutorial.pdf">vrml_primer_tutorial.pdf</a> (1998)</p>
<p style="padding-left: 30px;"><a href="/downloads/WeBots_2002_guide.pdf">WeBots_2002_guide.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Aibo and Webots_Simulation, wireless remote control and controller transfer.pdf">Aibo and Webots_Simulation, wireless remote control and controller transfer.pdf</a> (2006)</p>
<p style="padding-left: 30px;"><a href="/downloads/Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf">Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf</a> (2009)</p>
<p style="padding-left: 30px;"><a href="/downloads/Cyberbotics Robot Curriculum.pdf">Cyberbotics Robot Curriculum.pdf</a> (2010)</p>
<p style="padding-left: 30px;"><a href="/downloads/webots_2010_ex1.pdf">webots_2010_ex1.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/WeBots_2011_guide.pdf">Webots_2011_guide.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/WeBots_2012_guide.pdf">Webots_2012_guide.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Improving support for e-puck robot in Webots mobile robots simulation software.pdf">Improving support for e-puck robot in Webots mobile robots simulation software.pdf </a>(2012)</p>
<p style="padding-left: 30px;"><a href="/downloads/Development of Microphone and Speaker models in Webots using OpenAL.pdf">Development of Microphone and Speaker models in Webots using OpenAL.pdf</a> (2012)</p>
<p style="padding-left: 30px;"><a href="/downloads/Interfacing an Android-based phone-robot with Webots.pdf">Interfacing an Android-based phone-robot with Webots.pdf</a> (2012)</p>
<p style="padding-left: 30px;"><a href="/downloads/Mobile Robot modeling, Simulation and Programming.pdf">Mobile Robot modeling, Simulation and Programming.pdf</a> (2013)</p>
<p style="padding-left: 30px;"><a href="/downloads/Mobile Robot modeling Simulating and Programming_New ASIMO.pdf">Mobile Robot modeling Simulating and Programming_New ASIMO.pdf</a> (2014)</p>
<p style="padding-left: 30px;"><a href="/downloads/ROS interface and URDF parser for Webots.pdf">ROS interface and URDF parser for Webots.pdf</a> (2014)</p>
<p style="padding-left: 30px;"><a href="/downloads/WeBots_2014_guide.pdf">Webots_2014_guide.pdf</a></p>
<p style="padding-left: 30px;">Webots get started: <a href="https://cyberbotics.com/#support">https://cyberbotics.com/#support</a> </p>
<p style="padding-left: 30px;">Webots user guide: <a href="https://cyberbotics.com/doc/guide/index">https://cyberbotics.com/doc/guide/index</a></p>
<p style="padding-left: 30px;">Webots reference manual: <a href="https://cyberbotics.com/doc/reference/index">https://cyberbotics.com/doc/reference/index</a></p>
<h4>Webots 示範影片</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/RhzZ6Ao6Shc" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Jv0bkgGf5vQ" width="560"></iframe></p>
<h2>Webots doc</h2>
<h4>網際文件處理技術</h4>
<p><a href="https://github.com/mdecourse/webots/tree/master/docs">https://github.com/mdecourse/webots/tree/master/docs</a> 為 Webots 的文件目錄, 其中 <a href="https://github.com/mdecourse/webots/blob/master/docs/doc.php">https://github.com/mdecourse/webots/blob/master/docs/doc.php</a> 負責處理 <a href="https://cyberbotics.com/doc/">https://cyberbotics.com/doc/</a> 目錄下的文件網際派送, 共有三個主要文件:</p>
<p>Webots Guide: <a href="https://cyberbotics.com/doc/guide/index">https://cyberbotics.com/doc/guide/index</a></p>
<p>Webots Reference Manual: <a href="https://cyberbotics.com/doc/reference/index">https://cyberbotics.com/doc/reference/index</a></p>
<p>Webots for Automobiles: <a href="https://cyberbotics.com/doc/automobile/index">https://cyberbotics.com/doc/automobile/index</a></p>
<p>意即, Webots 的網頁採用 php 程式, WWW 伺服器採用 Apache, 而操作系統則使用 Ubuntu.</p>
<p>從 <a href="https://github.com/omichel/webots/blob/master/docs/local_exporter.py">https://github.com/omichel/webots/blob/master/docs/local_exporter.py</a> 也可以發現, Webots 建議在近端使用 doc 目錄下文件的方式為, 利用 local_exporter.py 從官方網站下載 index.html 與 dependencies 目錄中所需的 Javascript, 然後再透過 index.html 導引各 Javascript 程式, 從 guide, reference 與 automobile 目錄中, 將 markdown 格式文件動態轉為 html.</p>
<p>利用 Markdown 與 Javascript 處理遠端與近端文件的好處是, 文件管理人員可以採用各式合用的文字編輯器管理所有 Markdown 檔案, 且各版本間的內容可以納入分散式版次管理系統, 不僅能夠多人非同步協同, 且透過資料庫中版次的內容擷取, 可以在同一網站中透過網際 URL 版次變數的宣告而擷取不同版本的文件.</p>
<p>例如: <a href="https://www.cyberbotics.com/doc/guide/page?version=R2019a">https://www.cyberbotics.com/doc/guide/page?version=R2019a</a> 可以取得倉儲中 tag 為 R2019a 版次的 Webots guide 文件內容.</p>
<p>而 <a href="https://www.cyberbotics.com/doc/guide/page?version=R2019a-rev1">https://www.cyberbotics.com/doc/guide/page?version=R2019a-rev1</a> 則是 R2019a-rev1 版次的文件內容.</p>
<p>以上處理網際文件的技術, 除了能夠將軟體套件的手冊納入分散式版次管理系統 (如 Git 或 Fossil SCM) 之外, 還能讓之後的多語系文件, 以不同的 Markdown 文件目錄儲存, 然後在主文件連結中提供不同語系 Markdown 文件所在目錄即可, 例如:</p>
<p>/doc/guide_zh-TW 指向中文正體文件目錄, 而 /doc/guide_zh-CN 則指向中文簡體文件目錄等, 各語系文件可以採用分散式版次管理的流程, 以非同步協同方式自行管理維護不同 Webots 套件的各種技術文件.</p>
<h4>KMOL 能夠從 Webots 技術文件處理流程中學到甚麼?</h4>
<p>這應該是一個不錯的 4+1 碩士題目:-)</p>
<p>Webots 早在 2008-2009 年間, 就已經 透過  <a href="https://en.wikibooks.org/wiki/Cyberbotics%27_Robot_Curriculum">https://en.wikibooks.org/wiki/Cyberbotics%27_Robot_Curriculum</a> 完成兩本導引課程文件的建構:</p>
<p><a href="/downloads/Cyberbotics Robot Curriculum.pdf">Cyberbotics Robot Curriculum.pdf</a></p>
<p><a href="/downloads/Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf">Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf</a></p>
<p>假如當年在編輯處理這些資料的過程, 能夠採用 Git 或 Fossil SCM 分散式版次管理系統, 現在應該就不只留下MediaWiki 或 pdf 的零散資料, 而是能夠讓隨後的學員回到當時的網際技術與文件格式情境, 充分了解改版與內容取捨細節, 以便更近一步掌握過去十年各種電腦與網路技術推陳出新的脈絡, 作為之後判斷與持續改進的依據.</p>